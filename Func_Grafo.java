/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package grafo_cliserv;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-22")
public class Func_Grafo {

  public interface Iface {

    public void criarVertice(int nome, int cor, java.lang.String descricao, double peso) throws org.apache.thrift.TException;

    public void criarAresta(int nomeV1, int nomeV2, double peso, boolean direcao) throws org.apache.thrift.TException;

    public void atualizarVertice(int nome, int cor, java.lang.String descricao, double peso) throws org.apache.thrift.TException;

    public void atualizarAresta(int nomeV1, int nomeV2, double peso, boolean direcao) throws org.apache.thrift.TException;

    public void lerAresta(int nomeA) throws org.apache.thrift.TException;

    public void lerVertice(int nomeV) throws org.apache.thrift.TException;

    public void deletarVertice(int nomeV) throws org.apache.thrift.TException;

    public void deletarAresta(int nomeV1, int nomeV2) throws org.apache.thrift.TException;

    public void listarVerticesAresta(java.lang.String descricao) throws org.apache.thrift.TException;

    public void listarArestasVertice(int nomeV) throws org.apache.thrift.TException;

    public void listarVerticesVizinhos(int nomeV) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void criarVertice(int nome, int cor, java.lang.String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void criarAresta(int nomeV1, int nomeV2, double peso, boolean direcao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void atualizarVertice(int nome, int cor, java.lang.String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void atualizarAresta(int nomeV1, int nomeV2, double peso, boolean direcao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void lerAresta(int nomeA, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void lerVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deletarVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deletarAresta(int nomeV1, int nomeV2, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void listarVerticesAresta(java.lang.String descricao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void listarArestasVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void listarVerticesVizinhos(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void criarVertice(int nome, int cor, java.lang.String descricao, double peso) throws org.apache.thrift.TException
    {
      send_criarVertice(nome, cor, descricao, peso);
      recv_criarVertice();
    }

    public void send_criarVertice(int nome, int cor, java.lang.String descricao, double peso) throws org.apache.thrift.TException
    {
      criarVertice_args args = new criarVertice_args();
      args.setNome(nome);
      args.setCor(cor);
      args.setDescricao(descricao);
      args.setPeso(peso);
      sendBase("criarVertice", args);
    }

    public void recv_criarVertice() throws org.apache.thrift.TException
    {
      criarVertice_result result = new criarVertice_result();
      receiveBase(result, "criarVertice");
      return;
    }

    public void criarAresta(int nomeV1, int nomeV2, double peso, boolean direcao) throws org.apache.thrift.TException
    {
      send_criarAresta(nomeV1, nomeV2, peso, direcao);
      recv_criarAresta();
    }

    public void send_criarAresta(int nomeV1, int nomeV2, double peso, boolean direcao) throws org.apache.thrift.TException
    {
      criarAresta_args args = new criarAresta_args();
      args.setNomeV1(nomeV1);
      args.setNomeV2(nomeV2);
      args.setPeso(peso);
      args.setDirecao(direcao);
      sendBase("criarAresta", args);
    }

    public void recv_criarAresta() throws org.apache.thrift.TException
    {
      criarAresta_result result = new criarAresta_result();
      receiveBase(result, "criarAresta");
      return;
    }

    public void atualizarVertice(int nome, int cor, java.lang.String descricao, double peso) throws org.apache.thrift.TException
    {
      send_atualizarVertice(nome, cor, descricao, peso);
      recv_atualizarVertice();
    }

    public void send_atualizarVertice(int nome, int cor, java.lang.String descricao, double peso) throws org.apache.thrift.TException
    {
      atualizarVertice_args args = new atualizarVertice_args();
      args.setNome(nome);
      args.setCor(cor);
      args.setDescricao(descricao);
      args.setPeso(peso);
      sendBase("atualizarVertice", args);
    }

    public void recv_atualizarVertice() throws org.apache.thrift.TException
    {
      atualizarVertice_result result = new atualizarVertice_result();
      receiveBase(result, "atualizarVertice");
      return;
    }

    public void atualizarAresta(int nomeV1, int nomeV2, double peso, boolean direcao) throws org.apache.thrift.TException
    {
      send_atualizarAresta(nomeV1, nomeV2, peso, direcao);
      recv_atualizarAresta();
    }

    public void send_atualizarAresta(int nomeV1, int nomeV2, double peso, boolean direcao) throws org.apache.thrift.TException
    {
      atualizarAresta_args args = new atualizarAresta_args();
      args.setNomeV1(nomeV1);
      args.setNomeV2(nomeV2);
      args.setPeso(peso);
      args.setDirecao(direcao);
      sendBase("atualizarAresta", args);
    }

    public void recv_atualizarAresta() throws org.apache.thrift.TException
    {
      atualizarAresta_result result = new atualizarAresta_result();
      receiveBase(result, "atualizarAresta");
      return;
    }

    public void lerAresta(int nomeA) throws org.apache.thrift.TException
    {
      send_lerAresta(nomeA);
      recv_lerAresta();
    }

    public void send_lerAresta(int nomeA) throws org.apache.thrift.TException
    {
      lerAresta_args args = new lerAresta_args();
      args.setNomeA(nomeA);
      sendBase("lerAresta", args);
    }

    public void recv_lerAresta() throws org.apache.thrift.TException
    {
      lerAresta_result result = new lerAresta_result();
      receiveBase(result, "lerAresta");
      return;
    }

    public void lerVertice(int nomeV) throws org.apache.thrift.TException
    {
      send_lerVertice(nomeV);
      recv_lerVertice();
    }

    public void send_lerVertice(int nomeV) throws org.apache.thrift.TException
    {
      lerVertice_args args = new lerVertice_args();
      args.setNomeV(nomeV);
      sendBase("lerVertice", args);
    }

    public void recv_lerVertice() throws org.apache.thrift.TException
    {
      lerVertice_result result = new lerVertice_result();
      receiveBase(result, "lerVertice");
      return;
    }

    public void deletarVertice(int nomeV) throws org.apache.thrift.TException
    {
      send_deletarVertice(nomeV);
      recv_deletarVertice();
    }

    public void send_deletarVertice(int nomeV) throws org.apache.thrift.TException
    {
      deletarVertice_args args = new deletarVertice_args();
      args.setNomeV(nomeV);
      sendBase("deletarVertice", args);
    }

    public void recv_deletarVertice() throws org.apache.thrift.TException
    {
      deletarVertice_result result = new deletarVertice_result();
      receiveBase(result, "deletarVertice");
      return;
    }

    public void deletarAresta(int nomeV1, int nomeV2) throws org.apache.thrift.TException
    {
      send_deletarAresta(nomeV1, nomeV2);
      recv_deletarAresta();
    }

    public void send_deletarAresta(int nomeV1, int nomeV2) throws org.apache.thrift.TException
    {
      deletarAresta_args args = new deletarAresta_args();
      args.setNomeV1(nomeV1);
      args.setNomeV2(nomeV2);
      sendBase("deletarAresta", args);
    }

    public void recv_deletarAresta() throws org.apache.thrift.TException
    {
      deletarAresta_result result = new deletarAresta_result();
      receiveBase(result, "deletarAresta");
      return;
    }

    public void listarVerticesAresta(java.lang.String descricao) throws org.apache.thrift.TException
    {
      send_listarVerticesAresta(descricao);
      recv_listarVerticesAresta();
    }

    public void send_listarVerticesAresta(java.lang.String descricao) throws org.apache.thrift.TException
    {
      listarVerticesAresta_args args = new listarVerticesAresta_args();
      args.setDescricao(descricao);
      sendBase("listarVerticesAresta", args);
    }

    public void recv_listarVerticesAresta() throws org.apache.thrift.TException
    {
      listarVerticesAresta_result result = new listarVerticesAresta_result();
      receiveBase(result, "listarVerticesAresta");
      return;
    }

    public void listarArestasVertice(int nomeV) throws org.apache.thrift.TException
    {
      send_listarArestasVertice(nomeV);
      recv_listarArestasVertice();
    }

    public void send_listarArestasVertice(int nomeV) throws org.apache.thrift.TException
    {
      listarArestasVertice_args args = new listarArestasVertice_args();
      args.setNomeV(nomeV);
      sendBase("listarArestasVertice", args);
    }

    public void recv_listarArestasVertice() throws org.apache.thrift.TException
    {
      listarArestasVertice_result result = new listarArestasVertice_result();
      receiveBase(result, "listarArestasVertice");
      return;
    }

    public void listarVerticesVizinhos(int nomeV) throws org.apache.thrift.TException
    {
      send_listarVerticesVizinhos(nomeV);
      recv_listarVerticesVizinhos();
    }

    public void send_listarVerticesVizinhos(int nomeV) throws org.apache.thrift.TException
    {
      listarVerticesVizinhos_args args = new listarVerticesVizinhos_args();
      args.setNomeV(nomeV);
      sendBase("listarVerticesVizinhos", args);
    }

    public void recv_listarVerticesVizinhos() throws org.apache.thrift.TException
    {
      listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
      receiveBase(result, "listarVerticesVizinhos");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void criarVertice(int nome, int cor, java.lang.String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      criarVertice_call method_call = new criarVertice_call(nome, cor, descricao, peso, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class criarVertice_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nome;
      private int cor;
      private java.lang.String descricao;
      private double peso;
      public criarVertice_call(int nome, int cor, java.lang.String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
        this.cor = cor;
        this.descricao = descricao;
        this.peso = peso;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("criarVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        criarVertice_args args = new criarVertice_args();
        args.setNome(nome);
        args.setCor(cor);
        args.setDescricao(descricao);
        args.setPeso(peso);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void criarAresta(int nomeV1, int nomeV2, double peso, boolean direcao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      criarAresta_call method_call = new criarAresta_call(nomeV1, nomeV2, peso, direcao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class criarAresta_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeV1;
      private int nomeV2;
      private double peso;
      private boolean direcao;
      public criarAresta_call(int nomeV1, int nomeV2, double peso, boolean direcao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV1 = nomeV1;
        this.nomeV2 = nomeV2;
        this.peso = peso;
        this.direcao = direcao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("criarAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        criarAresta_args args = new criarAresta_args();
        args.setNomeV1(nomeV1);
        args.setNomeV2(nomeV2);
        args.setPeso(peso);
        args.setDirecao(direcao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void atualizarVertice(int nome, int cor, java.lang.String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      atualizarVertice_call method_call = new atualizarVertice_call(nome, cor, descricao, peso, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class atualizarVertice_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nome;
      private int cor;
      private java.lang.String descricao;
      private double peso;
      public atualizarVertice_call(int nome, int cor, java.lang.String descricao, double peso, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
        this.cor = cor;
        this.descricao = descricao;
        this.peso = peso;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("atualizarVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        atualizarVertice_args args = new atualizarVertice_args();
        args.setNome(nome);
        args.setCor(cor);
        args.setDescricao(descricao);
        args.setPeso(peso);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void atualizarAresta(int nomeV1, int nomeV2, double peso, boolean direcao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      atualizarAresta_call method_call = new atualizarAresta_call(nomeV1, nomeV2, peso, direcao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class atualizarAresta_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeV1;
      private int nomeV2;
      private double peso;
      private boolean direcao;
      public atualizarAresta_call(int nomeV1, int nomeV2, double peso, boolean direcao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV1 = nomeV1;
        this.nomeV2 = nomeV2;
        this.peso = peso;
        this.direcao = direcao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("atualizarAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        atualizarAresta_args args = new atualizarAresta_args();
        args.setNomeV1(nomeV1);
        args.setNomeV2(nomeV2);
        args.setPeso(peso);
        args.setDirecao(direcao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void lerAresta(int nomeA, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lerAresta_call method_call = new lerAresta_call(nomeA, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lerAresta_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeA;
      public lerAresta_call(int nomeA, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeA = nomeA;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lerAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lerAresta_args args = new lerAresta_args();
        args.setNomeA(nomeA);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void lerVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lerVertice_call method_call = new lerVertice_call(nomeV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lerVertice_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeV;
      public lerVertice_call(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV = nomeV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lerVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lerVertice_args args = new lerVertice_args();
        args.setNomeV(nomeV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deletarVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletarVertice_call method_call = new deletarVertice_call(nomeV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletarVertice_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeV;
      public deletarVertice_call(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV = nomeV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletarVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletarVertice_args args = new deletarVertice_args();
        args.setNomeV(nomeV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deletarAresta(int nomeV1, int nomeV2, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletarAresta_call method_call = new deletarAresta_call(nomeV1, nomeV2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletarAresta_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeV1;
      private int nomeV2;
      public deletarAresta_call(int nomeV1, int nomeV2, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV1 = nomeV1;
        this.nomeV2 = nomeV2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletarAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletarAresta_args args = new deletarAresta_args();
        args.setNomeV1(nomeV1);
        args.setNomeV2(nomeV2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void listarVerticesAresta(java.lang.String descricao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarVerticesAresta_call method_call = new listarVerticesAresta_call(descricao, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarVerticesAresta_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String descricao;
      public listarVerticesAresta_call(java.lang.String descricao, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.descricao = descricao;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarVerticesAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarVerticesAresta_args args = new listarVerticesAresta_args();
        args.setDescricao(descricao);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void listarArestasVertice(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarArestasVertice_call method_call = new listarArestasVertice_call(nomeV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarArestasVertice_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeV;
      public listarArestasVertice_call(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV = nomeV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarArestasVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarArestasVertice_args args = new listarArestasVertice_args();
        args.setNomeV(nomeV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void listarVerticesVizinhos(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listarVerticesVizinhos_call method_call = new listarVerticesVizinhos_call(nomeV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listarVerticesVizinhos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int nomeV;
      public listarVerticesVizinhos_call(int nomeV, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV = nomeV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listarVerticesVizinhos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listarVerticesVizinhos_args args = new listarVerticesVizinhos_args();
        args.setNomeV(nomeV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("criarVertice", new criarVertice());
      processMap.put("criarAresta", new criarAresta());
      processMap.put("atualizarVertice", new atualizarVertice());
      processMap.put("atualizarAresta", new atualizarAresta());
      processMap.put("lerAresta", new lerAresta());
      processMap.put("lerVertice", new lerVertice());
      processMap.put("deletarVertice", new deletarVertice());
      processMap.put("deletarAresta", new deletarAresta());
      processMap.put("listarVerticesAresta", new listarVerticesAresta());
      processMap.put("listarArestasVertice", new listarArestasVertice());
      processMap.put("listarVerticesVizinhos", new listarVerticesVizinhos());
      return processMap;
    }

    public static class criarVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, criarVertice_args> {
      public criarVertice() {
        super("criarVertice");
      }

      public criarVertice_args getEmptyArgsInstance() {
        return new criarVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public criarVertice_result getResult(I iface, criarVertice_args args) throws org.apache.thrift.TException {
        criarVertice_result result = new criarVertice_result();
        iface.criarVertice(args.nome, args.cor, args.descricao, args.peso);
        return result;
      }
    }

    public static class criarAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, criarAresta_args> {
      public criarAresta() {
        super("criarAresta");
      }

      public criarAresta_args getEmptyArgsInstance() {
        return new criarAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public criarAresta_result getResult(I iface, criarAresta_args args) throws org.apache.thrift.TException {
        criarAresta_result result = new criarAresta_result();
        iface.criarAresta(args.nomeV1, args.nomeV2, args.peso, args.direcao);
        return result;
      }
    }

    public static class atualizarVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, atualizarVertice_args> {
      public atualizarVertice() {
        super("atualizarVertice");
      }

      public atualizarVertice_args getEmptyArgsInstance() {
        return new atualizarVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public atualizarVertice_result getResult(I iface, atualizarVertice_args args) throws org.apache.thrift.TException {
        atualizarVertice_result result = new atualizarVertice_result();
        iface.atualizarVertice(args.nome, args.cor, args.descricao, args.peso);
        return result;
      }
    }

    public static class atualizarAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, atualizarAresta_args> {
      public atualizarAresta() {
        super("atualizarAresta");
      }

      public atualizarAresta_args getEmptyArgsInstance() {
        return new atualizarAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public atualizarAresta_result getResult(I iface, atualizarAresta_args args) throws org.apache.thrift.TException {
        atualizarAresta_result result = new atualizarAresta_result();
        iface.atualizarAresta(args.nomeV1, args.nomeV2, args.peso, args.direcao);
        return result;
      }
    }

    public static class lerAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lerAresta_args> {
      public lerAresta() {
        super("lerAresta");
      }

      public lerAresta_args getEmptyArgsInstance() {
        return new lerAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lerAresta_result getResult(I iface, lerAresta_args args) throws org.apache.thrift.TException {
        lerAresta_result result = new lerAresta_result();
        iface.lerAresta(args.nomeA);
        return result;
      }
    }

    public static class lerVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lerVertice_args> {
      public lerVertice() {
        super("lerVertice");
      }

      public lerVertice_args getEmptyArgsInstance() {
        return new lerVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lerVertice_result getResult(I iface, lerVertice_args args) throws org.apache.thrift.TException {
        lerVertice_result result = new lerVertice_result();
        iface.lerVertice(args.nomeV);
        return result;
      }
    }

    public static class deletarVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletarVertice_args> {
      public deletarVertice() {
        super("deletarVertice");
      }

      public deletarVertice_args getEmptyArgsInstance() {
        return new deletarVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletarVertice_result getResult(I iface, deletarVertice_args args) throws org.apache.thrift.TException {
        deletarVertice_result result = new deletarVertice_result();
        iface.deletarVertice(args.nomeV);
        return result;
      }
    }

    public static class deletarAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletarAresta_args> {
      public deletarAresta() {
        super("deletarAresta");
      }

      public deletarAresta_args getEmptyArgsInstance() {
        return new deletarAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletarAresta_result getResult(I iface, deletarAresta_args args) throws org.apache.thrift.TException {
        deletarAresta_result result = new deletarAresta_result();
        iface.deletarAresta(args.nomeV1, args.nomeV2);
        return result;
      }
    }

    public static class listarVerticesAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarVerticesAresta_args> {
      public listarVerticesAresta() {
        super("listarVerticesAresta");
      }

      public listarVerticesAresta_args getEmptyArgsInstance() {
        return new listarVerticesAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarVerticesAresta_result getResult(I iface, listarVerticesAresta_args args) throws org.apache.thrift.TException {
        listarVerticesAresta_result result = new listarVerticesAresta_result();
        iface.listarVerticesAresta(args.descricao);
        return result;
      }
    }

    public static class listarArestasVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarArestasVertice_args> {
      public listarArestasVertice() {
        super("listarArestasVertice");
      }

      public listarArestasVertice_args getEmptyArgsInstance() {
        return new listarArestasVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarArestasVertice_result getResult(I iface, listarArestasVertice_args args) throws org.apache.thrift.TException {
        listarArestasVertice_result result = new listarArestasVertice_result();
        iface.listarArestasVertice(args.nomeV);
        return result;
      }
    }

    public static class listarVerticesVizinhos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listarVerticesVizinhos_args> {
      public listarVerticesVizinhos() {
        super("listarVerticesVizinhos");
      }

      public listarVerticesVizinhos_args getEmptyArgsInstance() {
        return new listarVerticesVizinhos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listarVerticesVizinhos_result getResult(I iface, listarVerticesVizinhos_args args) throws org.apache.thrift.TException {
        listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
        iface.listarVerticesVizinhos(args.nomeV);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("criarVertice", new criarVertice());
      processMap.put("criarAresta", new criarAresta());
      processMap.put("atualizarVertice", new atualizarVertice());
      processMap.put("atualizarAresta", new atualizarAresta());
      processMap.put("lerAresta", new lerAresta());
      processMap.put("lerVertice", new lerVertice());
      processMap.put("deletarVertice", new deletarVertice());
      processMap.put("deletarAresta", new deletarAresta());
      processMap.put("listarVerticesAresta", new listarVerticesAresta());
      processMap.put("listarArestasVertice", new listarArestasVertice());
      processMap.put("listarVerticesVizinhos", new listarVerticesVizinhos());
      return processMap;
    }

    public static class criarVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, criarVertice_args, Void> {
      public criarVertice() {
        super("criarVertice");
      }

      public criarVertice_args getEmptyArgsInstance() {
        return new criarVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            criarVertice_result result = new criarVertice_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            criarVertice_result result = new criarVertice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, criarVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.criarVertice(args.nome, args.cor, args.descricao, args.peso,resultHandler);
      }
    }

    public static class criarAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, criarAresta_args, Void> {
      public criarAresta() {
        super("criarAresta");
      }

      public criarAresta_args getEmptyArgsInstance() {
        return new criarAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            criarAresta_result result = new criarAresta_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            criarAresta_result result = new criarAresta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, criarAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.criarAresta(args.nomeV1, args.nomeV2, args.peso, args.direcao,resultHandler);
      }
    }

    public static class atualizarVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, atualizarVertice_args, Void> {
      public atualizarVertice() {
        super("atualizarVertice");
      }

      public atualizarVertice_args getEmptyArgsInstance() {
        return new atualizarVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            atualizarVertice_result result = new atualizarVertice_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            atualizarVertice_result result = new atualizarVertice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, atualizarVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.atualizarVertice(args.nome, args.cor, args.descricao, args.peso,resultHandler);
      }
    }

    public static class atualizarAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, atualizarAresta_args, Void> {
      public atualizarAresta() {
        super("atualizarAresta");
      }

      public atualizarAresta_args getEmptyArgsInstance() {
        return new atualizarAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            atualizarAresta_result result = new atualizarAresta_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            atualizarAresta_result result = new atualizarAresta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, atualizarAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.atualizarAresta(args.nomeV1, args.nomeV2, args.peso, args.direcao,resultHandler);
      }
    }

    public static class lerAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lerAresta_args, Void> {
      public lerAresta() {
        super("lerAresta");
      }

      public lerAresta_args getEmptyArgsInstance() {
        return new lerAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            lerAresta_result result = new lerAresta_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lerAresta_result result = new lerAresta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lerAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.lerAresta(args.nomeA,resultHandler);
      }
    }

    public static class lerVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lerVertice_args, Void> {
      public lerVertice() {
        super("lerVertice");
      }

      public lerVertice_args getEmptyArgsInstance() {
        return new lerVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            lerVertice_result result = new lerVertice_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lerVertice_result result = new lerVertice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lerVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.lerVertice(args.nomeV,resultHandler);
      }
    }

    public static class deletarVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletarVertice_args, Void> {
      public deletarVertice() {
        super("deletarVertice");
      }

      public deletarVertice_args getEmptyArgsInstance() {
        return new deletarVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deletarVertice_result result = new deletarVertice_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deletarVertice_result result = new deletarVertice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletarVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deletarVertice(args.nomeV,resultHandler);
      }
    }

    public static class deletarAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletarAresta_args, Void> {
      public deletarAresta() {
        super("deletarAresta");
      }

      public deletarAresta_args getEmptyArgsInstance() {
        return new deletarAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deletarAresta_result result = new deletarAresta_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deletarAresta_result result = new deletarAresta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletarAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deletarAresta(args.nomeV1, args.nomeV2,resultHandler);
      }
    }

    public static class listarVerticesAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarVerticesAresta_args, Void> {
      public listarVerticesAresta() {
        super("listarVerticesAresta");
      }

      public listarVerticesAresta_args getEmptyArgsInstance() {
        return new listarVerticesAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            listarVerticesAresta_result result = new listarVerticesAresta_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listarVerticesAresta_result result = new listarVerticesAresta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarVerticesAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.listarVerticesAresta(args.descricao,resultHandler);
      }
    }

    public static class listarArestasVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarArestasVertice_args, Void> {
      public listarArestasVertice() {
        super("listarArestasVertice");
      }

      public listarArestasVertice_args getEmptyArgsInstance() {
        return new listarArestasVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            listarArestasVertice_result result = new listarArestasVertice_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listarArestasVertice_result result = new listarArestasVertice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarArestasVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.listarArestasVertice(args.nomeV,resultHandler);
      }
    }

    public static class listarVerticesVizinhos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listarVerticesVizinhos_args, Void> {
      public listarVerticesVizinhos() {
        super("listarVerticesVizinhos");
      }

      public listarVerticesVizinhos_args getEmptyArgsInstance() {
        return new listarVerticesVizinhos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            listarVerticesVizinhos_result result = new listarVerticesVizinhos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listarVerticesVizinhos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.listarVerticesVizinhos(args.nomeV,resultHandler);
      }
    }

  }

  public static class criarVertice_args implements org.apache.thrift.TBase<criarVertice_args, criarVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<criarVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COR_FIELD_DESC = new org.apache.thrift.protocol.TField("cor", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new criarVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new criarVertice_argsTupleSchemeFactory();

    public int nome; // required
    public int cor; // required
    public java.lang.String descricao; // required
    public double peso; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome"),
      COR((short)2, "cor"),
      DESCRICAO((short)3, "descricao"),
      PESO((short)4, "peso");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          case 2: // COR
            return COR;
          case 3: // DESCRICAO
            return DESCRICAO;
          case 4: // PESO
            return PESO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private static final int __COR_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COR, new org.apache.thrift.meta_data.FieldMetaData("cor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarVertice_args.class, metaDataMap);
    }

    public criarVertice_args() {
    }

    public criarVertice_args(
      int nome,
      int cor,
      java.lang.String descricao,
      double peso)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
      this.cor = cor;
      setCorIsSet(true);
      this.descricao = descricao;
      this.peso = peso;
      setPesoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarVertice_args(criarVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
      this.cor = other.cor;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
      this.peso = other.peso;
    }

    public criarVertice_args deepCopy() {
      return new criarVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
      setCorIsSet(false);
      this.cor = 0;
      this.descricao = null;
      setPesoIsSet(false);
      this.peso = 0.0;
    }

    public int getNome() {
      return this.nome;
    }

    public criarVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public int getCor() {
      return this.cor;
    }

    public criarVertice_args setCor(int cor) {
      this.cor = cor;
      setCorIsSet(true);
      return this;
    }

    public void unsetCor() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COR_ISSET_ID);
    }

    /** Returns true if field cor is set (has been assigned a value) and false otherwise */
    public boolean isSetCor() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COR_ISSET_ID);
    }

    public void setCorIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COR_ISSET_ID, value);
    }

    public java.lang.String getDescricao() {
      return this.descricao;
    }

    public criarVertice_args setDescricao(java.lang.String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public double getPeso() {
      return this.peso;
    }

    public criarVertice_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((java.lang.Integer)value);
        }
        break;

      case COR:
        if (value == null) {
          unsetCor();
        } else {
          setCor((java.lang.Integer)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((java.lang.String)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return getNome();

      case COR:
        return getCor();

      case DESCRICAO:
        return getDescricao();

      case PESO:
        return getPeso();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      case COR:
        return isSetCor();
      case DESCRICAO:
        return isSetDescricao();
      case PESO:
        return isSetPeso();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof criarVertice_args)
        return this.equals((criarVertice_args)that);
      return false;
    }

    public boolean equals(criarVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      boolean this_present_cor = true;
      boolean that_present_cor = true;
      if (this_present_cor || that_present_cor) {
        if (!(this_present_cor && that_present_cor))
          return false;
        if (this.cor != that.cor)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nome;

      hashCode = hashCode * 8191 + cor;

      hashCode = hashCode * 8191 + ((isSetDescricao()) ? 131071 : 524287);
      if (isSetDescricao())
        hashCode = hashCode * 8191 + descricao.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(peso);

      return hashCode;
    }

    @Override
    public int compareTo(criarVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCor()).compareTo(other.isSetCor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cor, other.cor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("criarVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cor:");
      sb.append(this.cor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarVertice_argsStandardScheme getScheme() {
        return new criarVertice_argsStandardScheme();
      }
    }

    private static class criarVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<criarVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cor = iprot.readI32();
                struct.setCorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COR_FIELD_DESC);
        oprot.writeI32(struct.cor);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarVertice_argsTupleScheme getScheme() {
        return new criarVertice_argsTupleScheme();
      }
    }

    private static class criarVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<criarVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        if (struct.isSetCor()) {
          optionals.set(1);
        }
        if (struct.isSetDescricao()) {
          optionals.set(2);
        }
        if (struct.isSetPeso()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
        if (struct.isSetCor()) {
          oprot.writeI32(struct.cor);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cor = iprot.readI32();
          struct.setCorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class criarVertice_result implements org.apache.thrift.TBase<criarVertice_result, criarVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<criarVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarVertice_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new criarVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new criarVertice_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarVertice_result.class, metaDataMap);
    }

    public criarVertice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarVertice_result(criarVertice_result other) {
    }

    public criarVertice_result deepCopy() {
      return new criarVertice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof criarVertice_result)
        return this.equals((criarVertice_result)that);
      return false;
    }

    public boolean equals(criarVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(criarVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("criarVertice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarVertice_resultStandardScheme getScheme() {
        return new criarVertice_resultStandardScheme();
      }
    }

    private static class criarVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<criarVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarVertice_resultTupleScheme getScheme() {
        return new criarVertice_resultTupleScheme();
      }
    }

    private static class criarVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<criarVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class criarAresta_args implements org.apache.thrift.TBase<criarAresta_args, criarAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<criarAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarAresta_args");

    private static final org.apache.thrift.protocol.TField NOME_V1_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOME_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField DIRECAO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcao", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new criarAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new criarAresta_argsTupleSchemeFactory();

    public int nomeV1; // required
    public int nomeV2; // required
    public double peso; // required
    public boolean direcao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V1((short)1, "nomeV1"),
      NOME_V2((short)2, "nomeV2"),
      PESO((short)3, "peso"),
      DIRECAO((short)4, "direcao");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V1
            return NOME_V1;
          case 2: // NOME_V2
            return NOME_V2;
          case 3: // PESO
            return PESO;
          case 4: // DIRECAO
            return DIRECAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV1_ISSET_ID = 0;
    private static final int __NOMEV2_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private static final int __DIRECAO_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V1, new org.apache.thrift.meta_data.FieldMetaData("nomeV1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOME_V2, new org.apache.thrift.meta_data.FieldMetaData("nomeV2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DIRECAO, new org.apache.thrift.meta_data.FieldMetaData("direcao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarAresta_args.class, metaDataMap);
    }

    public criarAresta_args() {
    }

    public criarAresta_args(
      int nomeV1,
      int nomeV2,
      double peso,
      boolean direcao)
    {
      this();
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.direcao = direcao;
      setDirecaoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarAresta_args(criarAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV1 = other.nomeV1;
      this.nomeV2 = other.nomeV2;
      this.peso = other.peso;
      this.direcao = other.direcao;
    }

    public criarAresta_args deepCopy() {
      return new criarAresta_args(this);
    }

    @Override
    public void clear() {
      setNomeV1IsSet(false);
      this.nomeV1 = 0;
      setNomeV2IsSet(false);
      this.nomeV2 = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      setDirecaoIsSet(false);
      this.direcao = false;
    }

    public int getNomeV1() {
      return this.nomeV1;
    }

    public criarAresta_args setNomeV1(int nomeV1) {
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      return this;
    }

    public void unsetNomeV1() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    /** Returns true if field nomeV1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV1() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    public void setNomeV1IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV1_ISSET_ID, value);
    }

    public int getNomeV2() {
      return this.nomeV2;
    }

    public criarAresta_args setNomeV2(int nomeV2) {
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      return this;
    }

    public void unsetNomeV2() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    /** Returns true if field nomeV2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV2() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    public void setNomeV2IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV2_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public criarAresta_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public boolean isDirecao() {
      return this.direcao;
    }

    public criarAresta_args setDirecao(boolean direcao) {
      this.direcao = direcao;
      setDirecaoIsSet(true);
      return this;
    }

    public void unsetDirecao() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECAO_ISSET_ID);
    }

    /** Returns true if field direcao is set (has been assigned a value) and false otherwise */
    public boolean isSetDirecao() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECAO_ISSET_ID);
    }

    public void setDirecaoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECAO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V1:
        if (value == null) {
          unsetNomeV1();
        } else {
          setNomeV1((java.lang.Integer)value);
        }
        break;

      case NOME_V2:
        if (value == null) {
          unsetNomeV2();
        } else {
          setNomeV2((java.lang.Integer)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((java.lang.Double)value);
        }
        break;

      case DIRECAO:
        if (value == null) {
          unsetDirecao();
        } else {
          setDirecao((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V1:
        return getNomeV1();

      case NOME_V2:
        return getNomeV2();

      case PESO:
        return getPeso();

      case DIRECAO:
        return isDirecao();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V1:
        return isSetNomeV1();
      case NOME_V2:
        return isSetNomeV2();
      case PESO:
        return isSetPeso();
      case DIRECAO:
        return isSetDirecao();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof criarAresta_args)
        return this.equals((criarAresta_args)that);
      return false;
    }

    public boolean equals(criarAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV1 = true;
      boolean that_present_nomeV1 = true;
      if (this_present_nomeV1 || that_present_nomeV1) {
        if (!(this_present_nomeV1 && that_present_nomeV1))
          return false;
        if (this.nomeV1 != that.nomeV1)
          return false;
      }

      boolean this_present_nomeV2 = true;
      boolean that_present_nomeV2 = true;
      if (this_present_nomeV2 || that_present_nomeV2) {
        if (!(this_present_nomeV2 && that_present_nomeV2))
          return false;
        if (this.nomeV2 != that.nomeV2)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_direcao = true;
      boolean that_present_direcao = true;
      if (this_present_direcao || that_present_direcao) {
        if (!(this_present_direcao && that_present_direcao))
          return false;
        if (this.direcao != that.direcao)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV1;

      hashCode = hashCode * 8191 + nomeV2;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(peso);

      hashCode = hashCode * 8191 + ((direcao) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(criarAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV1()).compareTo(other.isSetNomeV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV1, other.nomeV1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNomeV2()).compareTo(other.isSetNomeV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV2, other.nomeV2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirecao()).compareTo(other.isSetDirecao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirecao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcao, other.direcao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("criarAresta_args(");
      boolean first = true;

      sb.append("nomeV1:");
      sb.append(this.nomeV1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nomeV2:");
      sb.append(this.nomeV2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direcao:");
      sb.append(this.direcao);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarAresta_argsStandardScheme getScheme() {
        return new criarAresta_argsStandardScheme();
      }
    }

    private static class criarAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<criarAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV1 = iprot.readI32();
                struct.setNomeV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOME_V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV2 = iprot.readI32();
                struct.setNomeV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DIRECAO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.direcao = iprot.readBool();
                struct.setDirecaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V1_FIELD_DESC);
        oprot.writeI32(struct.nomeV1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NOME_V2_FIELD_DESC);
        oprot.writeI32(struct.nomeV2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRECAO_FIELD_DESC);
        oprot.writeBool(struct.direcao);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarAresta_argsTupleScheme getScheme() {
        return new criarAresta_argsTupleScheme();
      }
    }

    private static class criarAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<criarAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV1()) {
          optionals.set(0);
        }
        if (struct.isSetNomeV2()) {
          optionals.set(1);
        }
        if (struct.isSetPeso()) {
          optionals.set(2);
        }
        if (struct.isSetDirecao()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNomeV1()) {
          oprot.writeI32(struct.nomeV1);
        }
        if (struct.isSetNomeV2()) {
          oprot.writeI32(struct.nomeV2);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDirecao()) {
          oprot.writeBool(struct.direcao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nomeV1 = iprot.readI32();
          struct.setNomeV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.nomeV2 = iprot.readI32();
          struct.setNomeV2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.direcao = iprot.readBool();
          struct.setDirecaoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class criarAresta_result implements org.apache.thrift.TBase<criarAresta_result, criarAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<criarAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("criarAresta_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new criarAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new criarAresta_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(criarAresta_result.class, metaDataMap);
    }

    public criarAresta_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public criarAresta_result(criarAresta_result other) {
    }

    public criarAresta_result deepCopy() {
      return new criarAresta_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof criarAresta_result)
        return this.equals((criarAresta_result)that);
      return false;
    }

    public boolean equals(criarAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(criarAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("criarAresta_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class criarAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarAresta_resultStandardScheme getScheme() {
        return new criarAresta_resultStandardScheme();
      }
    }

    private static class criarAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<criarAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, criarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, criarAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class criarAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public criarAresta_resultTupleScheme getScheme() {
        return new criarAresta_resultTupleScheme();
      }
    }

    private static class criarAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<criarAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, criarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, criarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class atualizarVertice_args implements org.apache.thrift.TBase<atualizarVertice_args, atualizarVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<atualizarVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atualizarVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COR_FIELD_DESC = new org.apache.thrift.protocol.TField("cor", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new atualizarVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new atualizarVertice_argsTupleSchemeFactory();

    public int nome; // required
    public int cor; // required
    public java.lang.String descricao; // required
    public double peso; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome"),
      COR((short)2, "cor"),
      DESCRICAO((short)3, "descricao"),
      PESO((short)4, "peso");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          case 2: // COR
            return COR;
          case 3: // DESCRICAO
            return DESCRICAO;
          case 4: // PESO
            return PESO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private static final int __COR_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COR, new org.apache.thrift.meta_data.FieldMetaData("cor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(atualizarVertice_args.class, metaDataMap);
    }

    public atualizarVertice_args() {
    }

    public atualizarVertice_args(
      int nome,
      int cor,
      java.lang.String descricao,
      double peso)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
      this.cor = cor;
      setCorIsSet(true);
      this.descricao = descricao;
      this.peso = peso;
      setPesoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public atualizarVertice_args(atualizarVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
      this.cor = other.cor;
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
      this.peso = other.peso;
    }

    public atualizarVertice_args deepCopy() {
      return new atualizarVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
      setCorIsSet(false);
      this.cor = 0;
      this.descricao = null;
      setPesoIsSet(false);
      this.peso = 0.0;
    }

    public int getNome() {
      return this.nome;
    }

    public atualizarVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public int getCor() {
      return this.cor;
    }

    public atualizarVertice_args setCor(int cor) {
      this.cor = cor;
      setCorIsSet(true);
      return this;
    }

    public void unsetCor() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COR_ISSET_ID);
    }

    /** Returns true if field cor is set (has been assigned a value) and false otherwise */
    public boolean isSetCor() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COR_ISSET_ID);
    }

    public void setCorIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COR_ISSET_ID, value);
    }

    public java.lang.String getDescricao() {
      return this.descricao;
    }

    public atualizarVertice_args setDescricao(java.lang.String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public double getPeso() {
      return this.peso;
    }

    public atualizarVertice_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((java.lang.Integer)value);
        }
        break;

      case COR:
        if (value == null) {
          unsetCor();
        } else {
          setCor((java.lang.Integer)value);
        }
        break;

      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((java.lang.String)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return getNome();

      case COR:
        return getCor();

      case DESCRICAO:
        return getDescricao();

      case PESO:
        return getPeso();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      case COR:
        return isSetCor();
      case DESCRICAO:
        return isSetDescricao();
      case PESO:
        return isSetPeso();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof atualizarVertice_args)
        return this.equals((atualizarVertice_args)that);
      return false;
    }

    public boolean equals(atualizarVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      boolean this_present_cor = true;
      boolean that_present_cor = true;
      if (this_present_cor || that_present_cor) {
        if (!(this_present_cor && that_present_cor))
          return false;
        if (this.cor != that.cor)
          return false;
      }

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nome;

      hashCode = hashCode * 8191 + cor;

      hashCode = hashCode * 8191 + ((isSetDescricao()) ? 131071 : 524287);
      if (isSetDescricao())
        hashCode = hashCode * 8191 + descricao.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(peso);

      return hashCode;
    }

    @Override
    public int compareTo(atualizarVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCor()).compareTo(other.isSetCor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cor, other.cor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("atualizarVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cor:");
      sb.append(this.cor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class atualizarVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarVertice_argsStandardScheme getScheme() {
        return new atualizarVertice_argsStandardScheme();
      }
    }

    private static class atualizarVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<atualizarVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, atualizarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cor = iprot.readI32();
                struct.setCorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, atualizarVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COR_FIELD_DESC);
        oprot.writeI32(struct.cor);
        oprot.writeFieldEnd();
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class atualizarVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarVertice_argsTupleScheme getScheme() {
        return new atualizarVertice_argsTupleScheme();
      }
    }

    private static class atualizarVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<atualizarVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, atualizarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        if (struct.isSetCor()) {
          optionals.set(1);
        }
        if (struct.isSetDescricao()) {
          optionals.set(2);
        }
        if (struct.isSetPeso()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
        if (struct.isSetCor()) {
          oprot.writeI32(struct.cor);
        }
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, atualizarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cor = iprot.readI32();
          struct.setCorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class atualizarVertice_result implements org.apache.thrift.TBase<atualizarVertice_result, atualizarVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<atualizarVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atualizarVertice_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new atualizarVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new atualizarVertice_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(atualizarVertice_result.class, metaDataMap);
    }

    public atualizarVertice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public atualizarVertice_result(atualizarVertice_result other) {
    }

    public atualizarVertice_result deepCopy() {
      return new atualizarVertice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof atualizarVertice_result)
        return this.equals((atualizarVertice_result)that);
      return false;
    }

    public boolean equals(atualizarVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(atualizarVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("atualizarVertice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class atualizarVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarVertice_resultStandardScheme getScheme() {
        return new atualizarVertice_resultStandardScheme();
      }
    }

    private static class atualizarVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<atualizarVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, atualizarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, atualizarVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class atualizarVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarVertice_resultTupleScheme getScheme() {
        return new atualizarVertice_resultTupleScheme();
      }
    }

    private static class atualizarVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<atualizarVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, atualizarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, atualizarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class atualizarAresta_args implements org.apache.thrift.TBase<atualizarAresta_args, atualizarAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<atualizarAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atualizarAresta_args");

    private static final org.apache.thrift.protocol.TField NOME_V1_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOME_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV2", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField DIRECAO_FIELD_DESC = new org.apache.thrift.protocol.TField("direcao", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new atualizarAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new atualizarAresta_argsTupleSchemeFactory();

    public int nomeV1; // required
    public int nomeV2; // required
    public double peso; // required
    public boolean direcao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V1((short)1, "nomeV1"),
      NOME_V2((short)2, "nomeV2"),
      PESO((short)3, "peso"),
      DIRECAO((short)4, "direcao");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V1
            return NOME_V1;
          case 2: // NOME_V2
            return NOME_V2;
          case 3: // PESO
            return PESO;
          case 4: // DIRECAO
            return DIRECAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV1_ISSET_ID = 0;
    private static final int __NOMEV2_ISSET_ID = 1;
    private static final int __PESO_ISSET_ID = 2;
    private static final int __DIRECAO_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V1, new org.apache.thrift.meta_data.FieldMetaData("nomeV1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOME_V2, new org.apache.thrift.meta_data.FieldMetaData("nomeV2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DIRECAO, new org.apache.thrift.meta_data.FieldMetaData("direcao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(atualizarAresta_args.class, metaDataMap);
    }

    public atualizarAresta_args() {
    }

    public atualizarAresta_args(
      int nomeV1,
      int nomeV2,
      double peso,
      boolean direcao)
    {
      this();
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      this.peso = peso;
      setPesoIsSet(true);
      this.direcao = direcao;
      setDirecaoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public atualizarAresta_args(atualizarAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV1 = other.nomeV1;
      this.nomeV2 = other.nomeV2;
      this.peso = other.peso;
      this.direcao = other.direcao;
    }

    public atualizarAresta_args deepCopy() {
      return new atualizarAresta_args(this);
    }

    @Override
    public void clear() {
      setNomeV1IsSet(false);
      this.nomeV1 = 0;
      setNomeV2IsSet(false);
      this.nomeV2 = 0;
      setPesoIsSet(false);
      this.peso = 0.0;
      setDirecaoIsSet(false);
      this.direcao = false;
    }

    public int getNomeV1() {
      return this.nomeV1;
    }

    public atualizarAresta_args setNomeV1(int nomeV1) {
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      return this;
    }

    public void unsetNomeV1() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    /** Returns true if field nomeV1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV1() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    public void setNomeV1IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV1_ISSET_ID, value);
    }

    public int getNomeV2() {
      return this.nomeV2;
    }

    public atualizarAresta_args setNomeV2(int nomeV2) {
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      return this;
    }

    public void unsetNomeV2() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    /** Returns true if field nomeV2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV2() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    public void setNomeV2IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV2_ISSET_ID, value);
    }

    public double getPeso() {
      return this.peso;
    }

    public atualizarAresta_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public boolean isDirecao() {
      return this.direcao;
    }

    public atualizarAresta_args setDirecao(boolean direcao) {
      this.direcao = direcao;
      setDirecaoIsSet(true);
      return this;
    }

    public void unsetDirecao() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRECAO_ISSET_ID);
    }

    /** Returns true if field direcao is set (has been assigned a value) and false otherwise */
    public boolean isSetDirecao() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRECAO_ISSET_ID);
    }

    public void setDirecaoIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRECAO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V1:
        if (value == null) {
          unsetNomeV1();
        } else {
          setNomeV1((java.lang.Integer)value);
        }
        break;

      case NOME_V2:
        if (value == null) {
          unsetNomeV2();
        } else {
          setNomeV2((java.lang.Integer)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((java.lang.Double)value);
        }
        break;

      case DIRECAO:
        if (value == null) {
          unsetDirecao();
        } else {
          setDirecao((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V1:
        return getNomeV1();

      case NOME_V2:
        return getNomeV2();

      case PESO:
        return getPeso();

      case DIRECAO:
        return isDirecao();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V1:
        return isSetNomeV1();
      case NOME_V2:
        return isSetNomeV2();
      case PESO:
        return isSetPeso();
      case DIRECAO:
        return isSetDirecao();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof atualizarAresta_args)
        return this.equals((atualizarAresta_args)that);
      return false;
    }

    public boolean equals(atualizarAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV1 = true;
      boolean that_present_nomeV1 = true;
      if (this_present_nomeV1 || that_present_nomeV1) {
        if (!(this_present_nomeV1 && that_present_nomeV1))
          return false;
        if (this.nomeV1 != that.nomeV1)
          return false;
      }

      boolean this_present_nomeV2 = true;
      boolean that_present_nomeV2 = true;
      if (this_present_nomeV2 || that_present_nomeV2) {
        if (!(this_present_nomeV2 && that_present_nomeV2))
          return false;
        if (this.nomeV2 != that.nomeV2)
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      boolean this_present_direcao = true;
      boolean that_present_direcao = true;
      if (this_present_direcao || that_present_direcao) {
        if (!(this_present_direcao && that_present_direcao))
          return false;
        if (this.direcao != that.direcao)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV1;

      hashCode = hashCode * 8191 + nomeV2;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(peso);

      hashCode = hashCode * 8191 + ((direcao) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(atualizarAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV1()).compareTo(other.isSetNomeV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV1, other.nomeV1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNomeV2()).compareTo(other.isSetNomeV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV2, other.nomeV2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirecao()).compareTo(other.isSetDirecao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirecao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direcao, other.direcao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("atualizarAresta_args(");
      boolean first = true;

      sb.append("nomeV1:");
      sb.append(this.nomeV1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nomeV2:");
      sb.append(this.nomeV2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      if (!first) sb.append(", ");
      sb.append("direcao:");
      sb.append(this.direcao);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class atualizarAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarAresta_argsStandardScheme getScheme() {
        return new atualizarAresta_argsStandardScheme();
      }
    }

    private static class atualizarAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<atualizarAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, atualizarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV1 = iprot.readI32();
                struct.setNomeV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOME_V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV2 = iprot.readI32();
                struct.setNomeV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DIRECAO
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.direcao = iprot.readBool();
                struct.setDirecaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, atualizarAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V1_FIELD_DESC);
        oprot.writeI32(struct.nomeV1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NOME_V2_FIELD_DESC);
        oprot.writeI32(struct.nomeV2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRECAO_FIELD_DESC);
        oprot.writeBool(struct.direcao);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class atualizarAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarAresta_argsTupleScheme getScheme() {
        return new atualizarAresta_argsTupleScheme();
      }
    }

    private static class atualizarAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<atualizarAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, atualizarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV1()) {
          optionals.set(0);
        }
        if (struct.isSetNomeV2()) {
          optionals.set(1);
        }
        if (struct.isSetPeso()) {
          optionals.set(2);
        }
        if (struct.isSetDirecao()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNomeV1()) {
          oprot.writeI32(struct.nomeV1);
        }
        if (struct.isSetNomeV2()) {
          oprot.writeI32(struct.nomeV2);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
        if (struct.isSetDirecao()) {
          oprot.writeBool(struct.direcao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, atualizarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nomeV1 = iprot.readI32();
          struct.setNomeV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.nomeV2 = iprot.readI32();
          struct.setNomeV2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.direcao = iprot.readBool();
          struct.setDirecaoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class atualizarAresta_result implements org.apache.thrift.TBase<atualizarAresta_result, atualizarAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<atualizarAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("atualizarAresta_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new atualizarAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new atualizarAresta_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(atualizarAresta_result.class, metaDataMap);
    }

    public atualizarAresta_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public atualizarAresta_result(atualizarAresta_result other) {
    }

    public atualizarAresta_result deepCopy() {
      return new atualizarAresta_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof atualizarAresta_result)
        return this.equals((atualizarAresta_result)that);
      return false;
    }

    public boolean equals(atualizarAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(atualizarAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("atualizarAresta_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class atualizarAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarAresta_resultStandardScheme getScheme() {
        return new atualizarAresta_resultStandardScheme();
      }
    }

    private static class atualizarAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<atualizarAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, atualizarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, atualizarAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class atualizarAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public atualizarAresta_resultTupleScheme getScheme() {
        return new atualizarAresta_resultTupleScheme();
      }
    }

    private static class atualizarAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<atualizarAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, atualizarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, atualizarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lerAresta_args implements org.apache.thrift.TBase<lerAresta_args, lerAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<lerAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerAresta_args");

    private static final org.apache.thrift.protocol.TField NOME_A_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeA", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lerAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lerAresta_argsTupleSchemeFactory();

    public int nomeA; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_A((short)1, "nomeA");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_A
            return NOME_A;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEA_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_A, new org.apache.thrift.meta_data.FieldMetaData("nomeA", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerAresta_args.class, metaDataMap);
    }

    public lerAresta_args() {
    }

    public lerAresta_args(
      int nomeA)
    {
      this();
      this.nomeA = nomeA;
      setNomeAIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerAresta_args(lerAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeA = other.nomeA;
    }

    public lerAresta_args deepCopy() {
      return new lerAresta_args(this);
    }

    @Override
    public void clear() {
      setNomeAIsSet(false);
      this.nomeA = 0;
    }

    public int getNomeA() {
      return this.nomeA;
    }

    public lerAresta_args setNomeA(int nomeA) {
      this.nomeA = nomeA;
      setNomeAIsSet(true);
      return this;
    }

    public void unsetNomeA() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEA_ISSET_ID);
    }

    /** Returns true if field nomeA is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeA() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEA_ISSET_ID);
    }

    public void setNomeAIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_A:
        if (value == null) {
          unsetNomeA();
        } else {
          setNomeA((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_A:
        return getNomeA();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_A:
        return isSetNomeA();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lerAresta_args)
        return this.equals((lerAresta_args)that);
      return false;
    }

    public boolean equals(lerAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeA = true;
      boolean that_present_nomeA = true;
      if (this_present_nomeA || that_present_nomeA) {
        if (!(this_present_nomeA && that_present_nomeA))
          return false;
        if (this.nomeA != that.nomeA)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeA;

      return hashCode;
    }

    @Override
    public int compareTo(lerAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeA()).compareTo(other.isSetNomeA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeA, other.nomeA);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lerAresta_args(");
      boolean first = true;

      sb.append("nomeA:");
      sb.append(this.nomeA);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerAresta_argsStandardScheme getScheme() {
        return new lerAresta_argsStandardScheme();
      }
    }

    private static class lerAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lerAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_A
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeA = iprot.readI32();
                struct.setNomeAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_A_FIELD_DESC);
        oprot.writeI32(struct.nomeA);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerAresta_argsTupleScheme getScheme() {
        return new lerAresta_argsTupleScheme();
      }
    }

    private static class lerAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lerAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeA()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNomeA()) {
          oprot.writeI32(struct.nomeA);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nomeA = iprot.readI32();
          struct.setNomeAIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lerAresta_result implements org.apache.thrift.TBase<lerAresta_result, lerAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<lerAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerAresta_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lerAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lerAresta_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerAresta_result.class, metaDataMap);
    }

    public lerAresta_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerAresta_result(lerAresta_result other) {
    }

    public lerAresta_result deepCopy() {
      return new lerAresta_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lerAresta_result)
        return this.equals((lerAresta_result)that);
      return false;
    }

    public boolean equals(lerAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(lerAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lerAresta_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerAresta_resultStandardScheme getScheme() {
        return new lerAresta_resultStandardScheme();
      }
    }

    private static class lerAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lerAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerAresta_resultTupleScheme getScheme() {
        return new lerAresta_resultTupleScheme();
      }
    }

    private static class lerAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lerAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lerVertice_args implements org.apache.thrift.TBase<lerVertice_args, lerVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<lerVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_V_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lerVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lerVertice_argsTupleSchemeFactory();

    public int nomeV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V((short)1, "nomeV");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V
            return NOME_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V, new org.apache.thrift.meta_data.FieldMetaData("nomeV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerVertice_args.class, metaDataMap);
    }

    public lerVertice_args() {
    }

    public lerVertice_args(
      int nomeV)
    {
      this();
      this.nomeV = nomeV;
      setNomeVIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerVertice_args(lerVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV = other.nomeV;
    }

    public lerVertice_args deepCopy() {
      return new lerVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeVIsSet(false);
      this.nomeV = 0;
    }

    public int getNomeV() {
      return this.nomeV;
    }

    public lerVertice_args setNomeV(int nomeV) {
      this.nomeV = nomeV;
      setNomeVIsSet(true);
      return this;
    }

    public void unsetNomeV() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    /** Returns true if field nomeV is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    public void setNomeVIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V:
        if (value == null) {
          unsetNomeV();
        } else {
          setNomeV((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V:
        return getNomeV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V:
        return isSetNomeV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lerVertice_args)
        return this.equals((lerVertice_args)that);
      return false;
    }

    public boolean equals(lerVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV = true;
      boolean that_present_nomeV = true;
      if (this_present_nomeV || that_present_nomeV) {
        if (!(this_present_nomeV && that_present_nomeV))
          return false;
        if (this.nomeV != that.nomeV)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV;

      return hashCode;
    }

    @Override
    public int compareTo(lerVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV()).compareTo(other.isSetNomeV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV, other.nomeV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lerVertice_args(");
      boolean first = true;

      sb.append("nomeV:");
      sb.append(this.nomeV);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerVertice_argsStandardScheme getScheme() {
        return new lerVertice_argsStandardScheme();
      }
    }

    private static class lerVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lerVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV = iprot.readI32();
                struct.setNomeVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V_FIELD_DESC);
        oprot.writeI32(struct.nomeV);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerVertice_argsTupleScheme getScheme() {
        return new lerVertice_argsTupleScheme();
      }
    }

    private static class lerVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lerVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNomeV()) {
          oprot.writeI32(struct.nomeV);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nomeV = iprot.readI32();
          struct.setNomeVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lerVertice_result implements org.apache.thrift.TBase<lerVertice_result, lerVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<lerVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lerVertice_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lerVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lerVertice_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lerVertice_result.class, metaDataMap);
    }

    public lerVertice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lerVertice_result(lerVertice_result other) {
    }

    public lerVertice_result deepCopy() {
      return new lerVertice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lerVertice_result)
        return this.equals((lerVertice_result)that);
      return false;
    }

    public boolean equals(lerVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(lerVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lerVertice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lerVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerVertice_resultStandardScheme getScheme() {
        return new lerVertice_resultStandardScheme();
      }
    }

    private static class lerVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lerVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lerVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lerVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lerVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lerVertice_resultTupleScheme getScheme() {
        return new lerVertice_resultTupleScheme();
      }
    }

    private static class lerVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lerVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lerVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lerVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletarVertice_args implements org.apache.thrift.TBase<deletarVertice_args, deletarVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletarVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletarVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_V_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletarVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletarVertice_argsTupleSchemeFactory();

    public int nomeV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V((short)1, "nomeV");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V
            return NOME_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V, new org.apache.thrift.meta_data.FieldMetaData("nomeV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletarVertice_args.class, metaDataMap);
    }

    public deletarVertice_args() {
    }

    public deletarVertice_args(
      int nomeV)
    {
      this();
      this.nomeV = nomeV;
      setNomeVIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletarVertice_args(deletarVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV = other.nomeV;
    }

    public deletarVertice_args deepCopy() {
      return new deletarVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeVIsSet(false);
      this.nomeV = 0;
    }

    public int getNomeV() {
      return this.nomeV;
    }

    public deletarVertice_args setNomeV(int nomeV) {
      this.nomeV = nomeV;
      setNomeVIsSet(true);
      return this;
    }

    public void unsetNomeV() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    /** Returns true if field nomeV is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    public void setNomeVIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V:
        if (value == null) {
          unsetNomeV();
        } else {
          setNomeV((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V:
        return getNomeV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V:
        return isSetNomeV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deletarVertice_args)
        return this.equals((deletarVertice_args)that);
      return false;
    }

    public boolean equals(deletarVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV = true;
      boolean that_present_nomeV = true;
      if (this_present_nomeV || that_present_nomeV) {
        if (!(this_present_nomeV && that_present_nomeV))
          return false;
        if (this.nomeV != that.nomeV)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV;

      return hashCode;
    }

    @Override
    public int compareTo(deletarVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV()).compareTo(other.isSetNomeV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV, other.nomeV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deletarVertice_args(");
      boolean first = true;

      sb.append("nomeV:");
      sb.append(this.nomeV);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletarVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarVertice_argsStandardScheme getScheme() {
        return new deletarVertice_argsStandardScheme();
      }
    }

    private static class deletarVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletarVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV = iprot.readI32();
                struct.setNomeVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletarVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V_FIELD_DESC);
        oprot.writeI32(struct.nomeV);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletarVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarVertice_argsTupleScheme getScheme() {
        return new deletarVertice_argsTupleScheme();
      }
    }

    private static class deletarVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletarVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNomeV()) {
          oprot.writeI32(struct.nomeV);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletarVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nomeV = iprot.readI32();
          struct.setNomeVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletarVertice_result implements org.apache.thrift.TBase<deletarVertice_result, deletarVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletarVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletarVertice_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletarVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletarVertice_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletarVertice_result.class, metaDataMap);
    }

    public deletarVertice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletarVertice_result(deletarVertice_result other) {
    }

    public deletarVertice_result deepCopy() {
      return new deletarVertice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deletarVertice_result)
        return this.equals((deletarVertice_result)that);
      return false;
    }

    public boolean equals(deletarVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deletarVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deletarVertice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletarVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarVertice_resultStandardScheme getScheme() {
        return new deletarVertice_resultStandardScheme();
      }
    }

    private static class deletarVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletarVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletarVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletarVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarVertice_resultTupleScheme getScheme() {
        return new deletarVertice_resultTupleScheme();
      }
    }

    private static class deletarVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletarVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletarVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletarAresta_args implements org.apache.thrift.TBase<deletarAresta_args, deletarAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletarAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletarAresta_args");

    private static final org.apache.thrift.protocol.TField NOME_V1_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOME_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletarAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletarAresta_argsTupleSchemeFactory();

    public int nomeV1; // required
    public int nomeV2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V1((short)1, "nomeV1"),
      NOME_V2((short)2, "nomeV2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V1
            return NOME_V1;
          case 2: // NOME_V2
            return NOME_V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV1_ISSET_ID = 0;
    private static final int __NOMEV2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V1, new org.apache.thrift.meta_data.FieldMetaData("nomeV1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOME_V2, new org.apache.thrift.meta_data.FieldMetaData("nomeV2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletarAresta_args.class, metaDataMap);
    }

    public deletarAresta_args() {
    }

    public deletarAresta_args(
      int nomeV1,
      int nomeV2)
    {
      this();
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletarAresta_args(deletarAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV1 = other.nomeV1;
      this.nomeV2 = other.nomeV2;
    }

    public deletarAresta_args deepCopy() {
      return new deletarAresta_args(this);
    }

    @Override
    public void clear() {
      setNomeV1IsSet(false);
      this.nomeV1 = 0;
      setNomeV2IsSet(false);
      this.nomeV2 = 0;
    }

    public int getNomeV1() {
      return this.nomeV1;
    }

    public deletarAresta_args setNomeV1(int nomeV1) {
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      return this;
    }

    public void unsetNomeV1() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    /** Returns true if field nomeV1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV1() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    public void setNomeV1IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV1_ISSET_ID, value);
    }

    public int getNomeV2() {
      return this.nomeV2;
    }

    public deletarAresta_args setNomeV2(int nomeV2) {
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      return this;
    }

    public void unsetNomeV2() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    /** Returns true if field nomeV2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV2() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    public void setNomeV2IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V1:
        if (value == null) {
          unsetNomeV1();
        } else {
          setNomeV1((java.lang.Integer)value);
        }
        break;

      case NOME_V2:
        if (value == null) {
          unsetNomeV2();
        } else {
          setNomeV2((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V1:
        return getNomeV1();

      case NOME_V2:
        return getNomeV2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V1:
        return isSetNomeV1();
      case NOME_V2:
        return isSetNomeV2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deletarAresta_args)
        return this.equals((deletarAresta_args)that);
      return false;
    }

    public boolean equals(deletarAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV1 = true;
      boolean that_present_nomeV1 = true;
      if (this_present_nomeV1 || that_present_nomeV1) {
        if (!(this_present_nomeV1 && that_present_nomeV1))
          return false;
        if (this.nomeV1 != that.nomeV1)
          return false;
      }

      boolean this_present_nomeV2 = true;
      boolean that_present_nomeV2 = true;
      if (this_present_nomeV2 || that_present_nomeV2) {
        if (!(this_present_nomeV2 && that_present_nomeV2))
          return false;
        if (this.nomeV2 != that.nomeV2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV1;

      hashCode = hashCode * 8191 + nomeV2;

      return hashCode;
    }

    @Override
    public int compareTo(deletarAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV1()).compareTo(other.isSetNomeV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV1, other.nomeV1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNomeV2()).compareTo(other.isSetNomeV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV2, other.nomeV2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deletarAresta_args(");
      boolean first = true;

      sb.append("nomeV1:");
      sb.append(this.nomeV1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nomeV2:");
      sb.append(this.nomeV2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletarAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarAresta_argsStandardScheme getScheme() {
        return new deletarAresta_argsStandardScheme();
      }
    }

    private static class deletarAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletarAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV1 = iprot.readI32();
                struct.setNomeV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOME_V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV2 = iprot.readI32();
                struct.setNomeV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletarAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V1_FIELD_DESC);
        oprot.writeI32(struct.nomeV1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NOME_V2_FIELD_DESC);
        oprot.writeI32(struct.nomeV2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletarAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarAresta_argsTupleScheme getScheme() {
        return new deletarAresta_argsTupleScheme();
      }
    }

    private static class deletarAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletarAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV1()) {
          optionals.set(0);
        }
        if (struct.isSetNomeV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNomeV1()) {
          oprot.writeI32(struct.nomeV1);
        }
        if (struct.isSetNomeV2()) {
          oprot.writeI32(struct.nomeV2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletarAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nomeV1 = iprot.readI32();
          struct.setNomeV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.nomeV2 = iprot.readI32();
          struct.setNomeV2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletarAresta_result implements org.apache.thrift.TBase<deletarAresta_result, deletarAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletarAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletarAresta_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletarAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletarAresta_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletarAresta_result.class, metaDataMap);
    }

    public deletarAresta_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletarAresta_result(deletarAresta_result other) {
    }

    public deletarAresta_result deepCopy() {
      return new deletarAresta_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deletarAresta_result)
        return this.equals((deletarAresta_result)that);
      return false;
    }

    public boolean equals(deletarAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(deletarAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deletarAresta_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletarAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarAresta_resultStandardScheme getScheme() {
        return new deletarAresta_resultStandardScheme();
      }
    }

    private static class deletarAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletarAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletarAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletarAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletarAresta_resultTupleScheme getScheme() {
        return new deletarAresta_resultTupleScheme();
      }
    }

    private static class deletarAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletarAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletarAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listarVerticesAresta_args implements org.apache.thrift.TBase<listarVerticesAresta_args, listarVerticesAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticesAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticesAresta_args");

    private static final org.apache.thrift.protocol.TField DESCRICAO_FIELD_DESC = new org.apache.thrift.protocol.TField("descricao", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listarVerticesAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listarVerticesAresta_argsTupleSchemeFactory();

    public java.lang.String descricao; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRICAO((short)1, "descricao");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRICAO
            return DESCRICAO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRICAO, new org.apache.thrift.meta_data.FieldMetaData("descricao", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticesAresta_args.class, metaDataMap);
    }

    public listarVerticesAresta_args() {
    }

    public listarVerticesAresta_args(
      java.lang.String descricao)
    {
      this();
      this.descricao = descricao;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticesAresta_args(listarVerticesAresta_args other) {
      if (other.isSetDescricao()) {
        this.descricao = other.descricao;
      }
    }

    public listarVerticesAresta_args deepCopy() {
      return new listarVerticesAresta_args(this);
    }

    @Override
    public void clear() {
      this.descricao = null;
    }

    public java.lang.String getDescricao() {
      return this.descricao;
    }

    public listarVerticesAresta_args setDescricao(java.lang.String descricao) {
      this.descricao = descricao;
      return this;
    }

    public void unsetDescricao() {
      this.descricao = null;
    }

    /** Returns true if field descricao is set (has been assigned a value) and false otherwise */
    public boolean isSetDescricao() {
      return this.descricao != null;
    }

    public void setDescricaoIsSet(boolean value) {
      if (!value) {
        this.descricao = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DESCRICAO:
        if (value == null) {
          unsetDescricao();
        } else {
          setDescricao((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRICAO:
        return getDescricao();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DESCRICAO:
        return isSetDescricao();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticesAresta_args)
        return this.equals((listarVerticesAresta_args)that);
      return false;
    }

    public boolean equals(listarVerticesAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_descricao = true && this.isSetDescricao();
      boolean that_present_descricao = true && that.isSetDescricao();
      if (this_present_descricao || that_present_descricao) {
        if (!(this_present_descricao && that_present_descricao))
          return false;
        if (!this.descricao.equals(that.descricao))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDescricao()) ? 131071 : 524287);
      if (isSetDescricao())
        hashCode = hashCode * 8191 + descricao.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(listarVerticesAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDescricao()).compareTo(other.isSetDescricao());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescricao()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descricao, other.descricao);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listarVerticesAresta_args(");
      boolean first = true;

      sb.append("descricao:");
      if (this.descricao == null) {
        sb.append("null");
      } else {
        sb.append(this.descricao);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticesAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesAresta_argsStandardScheme getScheme() {
        return new listarVerticesAresta_argsStandardScheme();
      }
    }

    private static class listarVerticesAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listarVerticesAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticesAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRICAO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.descricao = iprot.readString();
                struct.setDescricaoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticesAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.descricao != null) {
          oprot.writeFieldBegin(DESCRICAO_FIELD_DESC);
          oprot.writeString(struct.descricao);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticesAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesAresta_argsTupleScheme getScheme() {
        return new listarVerticesAresta_argsTupleScheme();
      }
    }

    private static class listarVerticesAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listarVerticesAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticesAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDescricao()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDescricao()) {
          oprot.writeString(struct.descricao);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticesAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.descricao = iprot.readString();
          struct.setDescricaoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listarVerticesAresta_result implements org.apache.thrift.TBase<listarVerticesAresta_result, listarVerticesAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticesAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticesAresta_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listarVerticesAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listarVerticesAresta_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticesAresta_result.class, metaDataMap);
    }

    public listarVerticesAresta_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticesAresta_result(listarVerticesAresta_result other) {
    }

    public listarVerticesAresta_result deepCopy() {
      return new listarVerticesAresta_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticesAresta_result)
        return this.equals((listarVerticesAresta_result)that);
      return false;
    }

    public boolean equals(listarVerticesAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(listarVerticesAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listarVerticesAresta_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticesAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesAresta_resultStandardScheme getScheme() {
        return new listarVerticesAresta_resultStandardScheme();
      }
    }

    private static class listarVerticesAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listarVerticesAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticesAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticesAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticesAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesAresta_resultTupleScheme getScheme() {
        return new listarVerticesAresta_resultTupleScheme();
      }
    }

    private static class listarVerticesAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listarVerticesAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticesAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticesAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listarArestasVertice_args implements org.apache.thrift.TBase<listarArestasVertice_args, listarArestasVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarArestasVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarArestasVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_V_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listarArestasVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listarArestasVertice_argsTupleSchemeFactory();

    public int nomeV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V((short)1, "nomeV");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V
            return NOME_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V, new org.apache.thrift.meta_data.FieldMetaData("nomeV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarArestasVertice_args.class, metaDataMap);
    }

    public listarArestasVertice_args() {
    }

    public listarArestasVertice_args(
      int nomeV)
    {
      this();
      this.nomeV = nomeV;
      setNomeVIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarArestasVertice_args(listarArestasVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV = other.nomeV;
    }

    public listarArestasVertice_args deepCopy() {
      return new listarArestasVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeVIsSet(false);
      this.nomeV = 0;
    }

    public int getNomeV() {
      return this.nomeV;
    }

    public listarArestasVertice_args setNomeV(int nomeV) {
      this.nomeV = nomeV;
      setNomeVIsSet(true);
      return this;
    }

    public void unsetNomeV() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    /** Returns true if field nomeV is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    public void setNomeVIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V:
        if (value == null) {
          unsetNomeV();
        } else {
          setNomeV((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V:
        return getNomeV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V:
        return isSetNomeV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listarArestasVertice_args)
        return this.equals((listarArestasVertice_args)that);
      return false;
    }

    public boolean equals(listarArestasVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV = true;
      boolean that_present_nomeV = true;
      if (this_present_nomeV || that_present_nomeV) {
        if (!(this_present_nomeV && that_present_nomeV))
          return false;
        if (this.nomeV != that.nomeV)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV;

      return hashCode;
    }

    @Override
    public int compareTo(listarArestasVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV()).compareTo(other.isSetNomeV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV, other.nomeV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listarArestasVertice_args(");
      boolean first = true;

      sb.append("nomeV:");
      sb.append(this.nomeV);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarArestasVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarArestasVertice_argsStandardScheme getScheme() {
        return new listarArestasVertice_argsStandardScheme();
      }
    }

    private static class listarArestasVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listarArestasVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV = iprot.readI32();
                struct.setNomeVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V_FIELD_DESC);
        oprot.writeI32(struct.nomeV);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarArestasVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarArestasVertice_argsTupleScheme getScheme() {
        return new listarArestasVertice_argsTupleScheme();
      }
    }

    private static class listarArestasVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listarArestasVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNomeV()) {
          oprot.writeI32(struct.nomeV);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nomeV = iprot.readI32();
          struct.setNomeVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listarArestasVertice_result implements org.apache.thrift.TBase<listarArestasVertice_result, listarArestasVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarArestasVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarArestasVertice_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listarArestasVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listarArestasVertice_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarArestasVertice_result.class, metaDataMap);
    }

    public listarArestasVertice_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarArestasVertice_result(listarArestasVertice_result other) {
    }

    public listarArestasVertice_result deepCopy() {
      return new listarArestasVertice_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listarArestasVertice_result)
        return this.equals((listarArestasVertice_result)that);
      return false;
    }

    public boolean equals(listarArestasVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(listarArestasVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listarArestasVertice_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarArestasVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarArestasVertice_resultStandardScheme getScheme() {
        return new listarArestasVertice_resultStandardScheme();
      }
    }

    private static class listarArestasVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listarArestasVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarArestasVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarArestasVertice_resultTupleScheme getScheme() {
        return new listarArestasVertice_resultTupleScheme();
      }
    }

    private static class listarArestasVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listarArestasVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarArestasVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listarVerticesVizinhos_args implements org.apache.thrift.TBase<listarVerticesVizinhos_args, listarVerticesVizinhos_args._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticesVizinhos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticesVizinhos_args");

    private static final org.apache.thrift.protocol.TField NOME_V_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listarVerticesVizinhos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listarVerticesVizinhos_argsTupleSchemeFactory();

    public int nomeV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V((short)1, "nomeV");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V
            return NOME_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V, new org.apache.thrift.meta_data.FieldMetaData("nomeV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticesVizinhos_args.class, metaDataMap);
    }

    public listarVerticesVizinhos_args() {
    }

    public listarVerticesVizinhos_args(
      int nomeV)
    {
      this();
      this.nomeV = nomeV;
      setNomeVIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticesVizinhos_args(listarVerticesVizinhos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV = other.nomeV;
    }

    public listarVerticesVizinhos_args deepCopy() {
      return new listarVerticesVizinhos_args(this);
    }

    @Override
    public void clear() {
      setNomeVIsSet(false);
      this.nomeV = 0;
    }

    public int getNomeV() {
      return this.nomeV;
    }

    public listarVerticesVizinhos_args setNomeV(int nomeV) {
      this.nomeV = nomeV;
      setNomeVIsSet(true);
      return this;
    }

    public void unsetNomeV() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    /** Returns true if field nomeV is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV_ISSET_ID);
    }

    public void setNomeVIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V:
        if (value == null) {
          unsetNomeV();
        } else {
          setNomeV((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V:
        return getNomeV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V:
        return isSetNomeV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticesVizinhos_args)
        return this.equals((listarVerticesVizinhos_args)that);
      return false;
    }

    public boolean equals(listarVerticesVizinhos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV = true;
      boolean that_present_nomeV = true;
      if (this_present_nomeV || that_present_nomeV) {
        if (!(this_present_nomeV && that_present_nomeV))
          return false;
        if (this.nomeV != that.nomeV)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV;

      return hashCode;
    }

    @Override
    public int compareTo(listarVerticesVizinhos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV()).compareTo(other.isSetNomeV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV, other.nomeV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listarVerticesVizinhos_args(");
      boolean first = true;

      sb.append("nomeV:");
      sb.append(this.nomeV);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticesVizinhos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesVizinhos_argsStandardScheme getScheme() {
        return new listarVerticesVizinhos_argsStandardScheme();
      }
    }

    private static class listarVerticesVizinhos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<listarVerticesVizinhos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV = iprot.readI32();
                struct.setNomeVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V_FIELD_DESC);
        oprot.writeI32(struct.nomeV);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticesVizinhos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesVizinhos_argsTupleScheme getScheme() {
        return new listarVerticesVizinhos_argsTupleScheme();
      }
    }

    private static class listarVerticesVizinhos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<listarVerticesVizinhos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNomeV()) {
          oprot.writeI32(struct.nomeV);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nomeV = iprot.readI32();
          struct.setNomeVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class listarVerticesVizinhos_result implements org.apache.thrift.TBase<listarVerticesVizinhos_result, listarVerticesVizinhos_result._Fields>, java.io.Serializable, Cloneable, Comparable<listarVerticesVizinhos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listarVerticesVizinhos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new listarVerticesVizinhos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new listarVerticesVizinhos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listarVerticesVizinhos_result.class, metaDataMap);
    }

    public listarVerticesVizinhos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listarVerticesVizinhos_result(listarVerticesVizinhos_result other) {
    }

    public listarVerticesVizinhos_result deepCopy() {
      return new listarVerticesVizinhos_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof listarVerticesVizinhos_result)
        return this.equals((listarVerticesVizinhos_result)that);
      return false;
    }

    public boolean equals(listarVerticesVizinhos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(listarVerticesVizinhos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("listarVerticesVizinhos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listarVerticesVizinhos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesVizinhos_resultStandardScheme getScheme() {
        return new listarVerticesVizinhos_resultStandardScheme();
      }
    }

    private static class listarVerticesVizinhos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<listarVerticesVizinhos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listarVerticesVizinhos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public listarVerticesVizinhos_resultTupleScheme getScheme() {
        return new listarVerticesVizinhos_resultTupleScheme();
      }
    }

    private static class listarVerticesVizinhos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<listarVerticesVizinhos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listarVerticesVizinhos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
