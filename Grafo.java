/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package grafo_cliserv;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-22")
public class Grafo implements org.apache.thrift.TBase<Grafo, Grafo._Fields>, java.io.Serializable, Cloneable, Comparable<Grafo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Grafo");

  private static final org.apache.thrift.protocol.TField ARESTA_FIELD_DESC = new org.apache.thrift.protocol.TField("aresta", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VERTICE_FIELD_DESC = new org.apache.thrift.protocol.TField("vertice", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GrafoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GrafoTupleSchemeFactory();

  public java.util.List<Aresta> aresta; // required
  public java.util.List<Vertice> vertice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARESTA((short)1, "aresta"),
    VERTICE((short)2, "vertice");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARESTA
          return ARESTA;
        case 2: // VERTICE
          return VERTICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARESTA, new org.apache.thrift.meta_data.FieldMetaData("aresta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class))));
    tmpMap.put(_Fields.VERTICE, new org.apache.thrift.meta_data.FieldMetaData("vertice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Grafo.class, metaDataMap);
  }

  public Grafo() {
  }

  public Grafo(
    java.util.List<Aresta> aresta,
    java.util.List<Vertice> vertice)
  {
    this();
    this.aresta = aresta;
    this.vertice = vertice;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Grafo(Grafo other) {
    if (other.isSetAresta()) {
      java.util.List<Aresta> __this__aresta = new java.util.ArrayList<Aresta>(other.aresta.size());
      for (Aresta other_element : other.aresta) {
        __this__aresta.add(new Aresta(other_element));
      }
      this.aresta = __this__aresta;
    }
    if (other.isSetVertice()) {
      java.util.List<Vertice> __this__vertice = new java.util.ArrayList<Vertice>(other.vertice.size());
      for (Vertice other_element : other.vertice) {
        __this__vertice.add(new Vertice(other_element));
      }
      this.vertice = __this__vertice;
    }
  }

  public Grafo deepCopy() {
    return new Grafo(this);
  }

  @Override
  public void clear() {
    this.aresta = null;
    this.vertice = null;
  }

  public int getArestaSize() {
    return (this.aresta == null) ? 0 : this.aresta.size();
  }

  public java.util.Iterator<Aresta> getArestaIterator() {
    return (this.aresta == null) ? null : this.aresta.iterator();
  }

  public void addToAresta(Aresta elem) {
    if (this.aresta == null) {
      this.aresta = new java.util.ArrayList<Aresta>();
    }
    this.aresta.add(elem);
  }

  public java.util.List<Aresta> getAresta() {
    return this.aresta;
  }

  public Grafo setAresta(java.util.List<Aresta> aresta) {
    this.aresta = aresta;
    return this;
  }

  public void unsetAresta() {
    this.aresta = null;
  }

  /** Returns true if field aresta is set (has been assigned a value) and false otherwise */
  public boolean isSetAresta() {
    return this.aresta != null;
  }

  public void setArestaIsSet(boolean value) {
    if (!value) {
      this.aresta = null;
    }
  }

  public int getVerticeSize() {
    return (this.vertice == null) ? 0 : this.vertice.size();
  }

  public java.util.Iterator<Vertice> getVerticeIterator() {
    return (this.vertice == null) ? null : this.vertice.iterator();
  }

  public void addToVertice(Vertice elem) {
    if (this.vertice == null) {
      this.vertice = new java.util.ArrayList<Vertice>();
    }
    this.vertice.add(elem);
  }

  public java.util.List<Vertice> getVertice() {
    return this.vertice;
  }

  public Grafo setVertice(java.util.List<Vertice> vertice) {
    this.vertice = vertice;
    return this;
  }

  public void unsetVertice() {
    this.vertice = null;
  }

  /** Returns true if field vertice is set (has been assigned a value) and false otherwise */
  public boolean isSetVertice() {
    return this.vertice != null;
  }

  public void setVerticeIsSet(boolean value) {
    if (!value) {
      this.vertice = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ARESTA:
      if (value == null) {
        unsetAresta();
      } else {
        setAresta((java.util.List<Aresta>)value);
      }
      break;

    case VERTICE:
      if (value == null) {
        unsetVertice();
      } else {
        setVertice((java.util.List<Vertice>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ARESTA:
      return getAresta();

    case VERTICE:
      return getVertice();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ARESTA:
      return isSetAresta();
    case VERTICE:
      return isSetVertice();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Grafo)
      return this.equals((Grafo)that);
    return false;
  }

  public boolean equals(Grafo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_aresta = true && this.isSetAresta();
    boolean that_present_aresta = true && that.isSetAresta();
    if (this_present_aresta || that_present_aresta) {
      if (!(this_present_aresta && that_present_aresta))
        return false;
      if (!this.aresta.equals(that.aresta))
        return false;
    }

    boolean this_present_vertice = true && this.isSetVertice();
    boolean that_present_vertice = true && that.isSetVertice();
    if (this_present_vertice || that_present_vertice) {
      if (!(this_present_vertice && that_present_vertice))
        return false;
      if (!this.vertice.equals(that.vertice))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAresta()) ? 131071 : 524287);
    if (isSetAresta())
      hashCode = hashCode * 8191 + aresta.hashCode();

    hashCode = hashCode * 8191 + ((isSetVertice()) ? 131071 : 524287);
    if (isSetVertice())
      hashCode = hashCode * 8191 + vertice.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Grafo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAresta()).compareTo(other.isSetAresta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAresta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aresta, other.aresta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVertice()).compareTo(other.isSetVertice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVertice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertice, other.vertice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Grafo(");
    boolean first = true;

    sb.append("aresta:");
    if (this.aresta == null) {
      sb.append("null");
    } else {
      sb.append(this.aresta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vertice:");
    if (this.vertice == null) {
      sb.append("null");
    } else {
      sb.append(this.vertice);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GrafoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GrafoStandardScheme getScheme() {
      return new GrafoStandardScheme();
    }
  }

  private static class GrafoStandardScheme extends org.apache.thrift.scheme.StandardScheme<Grafo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Grafo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARESTA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.aresta = new java.util.ArrayList<Aresta>(_list0.size);
                Aresta _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Aresta();
                  _elem1.read(iprot);
                  struct.aresta.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setArestaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERTICE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.vertice = new java.util.ArrayList<Vertice>(_list3.size);
                Vertice _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new Vertice();
                  _elem4.read(iprot);
                  struct.vertice.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setVerticeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Grafo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.aresta != null) {
        oprot.writeFieldBegin(ARESTA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aresta.size()));
          for (Aresta _iter6 : struct.aresta)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.vertice != null) {
        oprot.writeFieldBegin(VERTICE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vertice.size()));
          for (Vertice _iter7 : struct.vertice)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GrafoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GrafoTupleScheme getScheme() {
      return new GrafoTupleScheme();
    }
  }

  private static class GrafoTupleScheme extends org.apache.thrift.scheme.TupleScheme<Grafo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Grafo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAresta()) {
        optionals.set(0);
      }
      if (struct.isSetVertice()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAresta()) {
        {
          oprot.writeI32(struct.aresta.size());
          for (Aresta _iter8 : struct.aresta)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetVertice()) {
        {
          oprot.writeI32(struct.vertice.size());
          for (Vertice _iter9 : struct.vertice)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Grafo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.aresta = new java.util.ArrayList<Aresta>(_list10.size);
          Aresta _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new Aresta();
            _elem11.read(iprot);
            struct.aresta.add(_elem11);
          }
        }
        struct.setArestaIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vertice = new java.util.ArrayList<Vertice>(_list13.size);
          Vertice _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new Vertice();
            _elem14.read(iprot);
            struct.vertice.add(_elem14);
          }
        }
        struct.setVerticeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}



